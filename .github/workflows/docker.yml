name: Docker

on:
  workflow_call:
    inputs:
      workflow-run-id:
        required: true
        type: string

permissions:
  contents: read
  packages: write

env:
  REGISTRY_IMAGE: ghcr.io/tuxuser/netiso-srv-rs

jobs:
  build-docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64-unknown-linux-musl, arm-unknown-linux-musleabi, i686-unknown-linux-musl, x86_64-unknown-linux-musl]
        include:
          - arch: aarch64-unknown-linux-musl
            buildx-platform: linux/arm64
          - arch: arm-unknown-linux-musleabi
            buildx-platform: linux/arm/v7
          - arch: x86_64-unknown-linux-musl
            buildx-platform: linux/amd64
          - arch: i686-unknown-linux-musl
            buildx-platform: linux/386

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.buildx-platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: netiso-srv-${{ matrix.arch }}
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}
          run-id: ${{ inputs.workflow-run-id }}

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      #- name: Login to Docker Hub
      #  if: github.event_name != 'pull_request'
      #  uses: docker/login-action@v3
      #  with:
      #    username: ${{ secrets.DOCKERHUB_USERNAME }}
      #    password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Copy binary
        run: |
          cp ./target/${{ matrix.arch }}/release/netiso-srv .

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.buildx-platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY_IMAGE }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

#      - name: Docker Hub Description
#        if: github.event_name != 'pull_request'
#        uses: peter-evans/dockerhub-description@v4
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_PASSWORD }}
#          repository: tuxuser/netiso-srv-rs
#          readme-filepath: ./README.md
#          short-description: "Alternative NetISO server for x360 netiso dashlaunch plugin"

  merge:
    runs-on: ubuntu-latest
    needs: [build-docker]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: ${{ env.REGISTRY_IMAGE }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Create manifest list and push
        if: github.event_name != 'pull_request'
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.docker_meta.outputs.version }}